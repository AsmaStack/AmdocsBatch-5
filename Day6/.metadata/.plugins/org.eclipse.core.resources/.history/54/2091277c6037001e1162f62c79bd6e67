package java8streamapi;

import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

public class TestIntermediateOperation {

	public static void main(String[] args) {
		
	
		List<Integer> numbers=Arrays.asList(2,6,7,5,10);
		
		List <Integer>squarenum=numbers.stream()
				.map(n->n*n)
			.collect(Collectors.toList());
		
		System.out.println("Squared Nos:"+squarenum);
		
		
		List evenNum= numbers.stream()
				.filter(n->n%2==0)
				.collect(Collectors.toList());
		System.out.println("Even No:"+evenNum);
		
		
		List sortedNum=numbers.stream()
				.sorted().collect(Collectors.toList());
		
		System.out.println("The sorted num ascending"+sortedNum);
		
		List descOrder=numbers.stream()
				.sorted(Collections.reverseOrder() ).toList();
		
		System.out.println("The sorted num descending"+descOrder);
		
		//foreach
		numbers.stream().map(x->x*5).
						forEach(res->System.out.println(res));
		
		//reduce
		int sumofeven=numbers.stream().filter(x->x%2==0)
						.reduce(0,(res,i)->res+i);
		System.out.println("Sum of even no "+sumofeven);
		
		int maxnum=numbers.stream()
				.max(Comparator.comparingInt(Integer::valueOf))
				.get();
		System.out.println("The Max no is "+maxnum);
		
		List <String> names=Arrays.asList("Arun","Ajay","Jay","Sri","sri","Grace","Ravi");
		
		names.stream().sorted(Collections.reverseOrder()).forEach(sortednames->System.out.println(sortednames));
		
		String maxname=names.stream()
				.max(Comparator.comparing(String::valueOf)).get();
		System.out.println("Max elem in names stream "+maxname);
		
		String minname=names.stream()
				.min(Comparator.comparing(String::valueOf)).get();
		System.out.println("Min elem in names stream "+minname);
		
		
		List<Integer> listnum=Arrays.asList(1,4,5,3,2,4,5,1,2,3,19);
		
		Set<Integer> result=findDuplicateElements(listnum);
		System.out.println(result);
		
		List<Float> listfloatnum=Arrays.asList(1.3f, 2.4f, 5.5f, 3.9f, 1.3f,8.5f);
		Set<Float> floatresult=findDuplicateElements(listfloatnum);
		System.out.println(floatresult);
		
		Set<Integer> dupFreq=findDuplicateFrequency(listnum);
		System.out.println(dupFreq);
	}

	private static <T> Set<T> findDuplicateElements(List<T> listnum) {
		
		Set<T> items= new HashSet<T>();
		
		return listnum.stream()
				.filter(n->items.add(n))
						.collect(Collectors.toSet());
	}
	
	private static<T> Set<T> findDuplicateFrequency(List<T> list)
	{
		return list.stream().filter(n->Collections.frequency(list, n)>1)
				.collect(Collectors.toSet());
	}
}
